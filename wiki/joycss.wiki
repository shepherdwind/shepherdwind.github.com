%title joycss文档
%template article

=== 什么是joycss ===

joycss是一个基于nodejs和php的自动拼图工具。joycss的目标：使用简单，功能强大。使
用简单，就是开发者无需配置，无需为拼图本身做额外的处理。功能强大，在于可以(是可
以不是必须)随意配置，支持个性化拼图需求。

快速使用介绍：[[what-make-joycss-different|joycss使用]]。源码:[[https://github.com/shepherdwind/joycss|repository]]。

线上实例：
- [[http://flower.taobao.com/|淘宝鲜花频道]]

=== 安装 ===

{{{
//安装
npm install -g joycss
//最简单执行
joycss xx.css
//显示帮助信息
joycss -h
  }}}

joycss目标是，让开发者无需拼图，大多数情况下，下面文档的说明不需要使用的。开发者
仅仅需要执行`joycss xx.css`，这样joycss会完成所有应该做的，可能存在少量的拼图错
误情况，这时候，需要单独设置图片的一些属性。单独设置主要有两种方式，命令行参数和
背景图url参数。命令行参数全局配置，url参数通常只对图片本身相关属性进行说明，比如
esc用去声明图片不加入拼图。

可能出现无法拼图的情况，整理在[[what-make-joycss-different]]一文中。

=== 命令行使用 ===

通过npm安装后，joycss可以终端或者shell下执行，运行`joycss -h`可以看到所有可以使用
的参数，在win下，dos可能出现中文乱码的情况，所有帮助文档使用英文。使用方式例子：
`joycss -casi example.css` 表示使用close，alpha，source，important四个方式组合，
意思是，使用紧凑拼图，生成png24图片，使用.source.css文件作为输入，并且在sprite
图片后面增加!important。参数和css文件的位置可以调换，使用`joycss a.css -casi`也
一样，或者参数分开`joycss -c a.css -a -si`。

-h, --help:: 显示帮助信息。

-v, --version:: 显示版本。

-y, --vertical:: 
:: 强制使用垂直布局。默认情况下是垂直布局和水平布局同时使用，当可以确定一个图片
:: 所在的box的宽度的时候，使用紧凑拼图，不能确定的，独占一行，垂直布局。

-c, --close:: 强制使用紧凑布局。使用url参数line改变单张图片规则，使之独占一行。

-a, --alpha:: 
:: 生成alpha透明方式生成png24图片，默认情况使用png8，使用alpha模式的时候，同时会
:: 生成png8图片，为ie6 兼容使用，此选项开启生成png24图作为sprite图片。

-w, --white:: 生成背景为白色的图片。

-s, --source:: 
:: 使用.source.css作为输入源。这种模式下，`joycss a.css`，第一次执行时，复制
:: a.css到a.source.css，sprite后生成文件为a.css，以后情况下，如果a.source.css存
:: 在，则读取a.source.css作为输入文件。在默认情况下，生成文件是a.sprite.css。

-i, --important::  为sprite规则增加important，提升优先级，防止被覆盖。

-u, --upload:: 
:: 使用图片上传。后面三个配置都是和图片上传有关，如果背景图需要使用绝对路径(在淘
:: 宝有固定的图片cdn服务，图片上传后，返回一个http的地址)，使用u参数，声明图片上
:: 传，并且使用返回的http路径覆盖相对路径的背景图。-u模式下，会生成一个，后缀为
:: json 的数据文件，文件名和输入文件名相同。用于贮存上传过的图片路径，在某些情况
:: ，样式源文件修改，背景图没有修改的情况下，不需要重新上传图片，使用下面的-n参
:: 数，直接使用贮存在本地的图片地址。

-n, --nochange:: 
:: 图片没有修改，不上传图片。已经上传过背景图，使用-n参数，声明背景图本身没有修
:: 改，无需再次上传图片，直接使用上一层上传的图片地址。

--config:: 
:: 上传文件接口配置，首先在某个目录下创建一个upload.json的文件，自行配置上传图片
:: 的host和path，淘宝内部接口请使用此接口[[http://wiki.ued.taobao.net/doku.php?id=team:vertical-guide:plum#joycss|upload]]。
:: 然后，在当前cd到当前目录，执行`joycss --config`，配置文件就可以生效了。图片上
:: 传接口必须返回json的数据，成功数据: `{url: 'http://a/xx.png'}`，错误信息返回
:: `{msg: 'error info'}`。配置文件格式如下：
{{{
{
  "host"    : "url.com",
  "path"    : "/path/to.htm",
  "filekey" : "photo",
  "headers" : {
    "Cookie": "a=b;"
  }
}
  }}}


=== url参数使用规则 ===

joycss的所有与开发者交互，都是通过背景图url参数来实现的，比如

{{{css
.main-right .tese h2 {
  background: url(../img/fenlei.png?id=1&way=h) repeat-y 0 0;
  width: 480px;
}
  }}}
  
url参数指的是上面css中，background的url中那一段`?id=1&way=h`，表示第二组sprite
图，排列方式way为水平horizontal
  
参数以及对应的意义
| 参数名 | 参数全名 | 参数的值   | 意义与作用                   | 使用实例    |
|--------|----------|------------|------------------------------|-------------|
| esc    | escape   | ''         | 图片无需拼图                 | a.png?esc   |
| way    | h        | horizontal | 排列方式水平排列 [g]         | a.png?way=h |
| way    | v        | vertical   | 垂直排列，默认方式[g]        | a.png?way=v |
| id     | id       | 0-9        | 分组id，id相同的图片合并一起 | a.png?id=1  |
| bottom | bottom   | \d         | 图片设置margin bottom [v]    | a.png?b=10  |
| right  | right    | \d         | 图片设置margin right [h]     | a.png?r=10  |
| base   | base     | ''         | 图片放在最前面               | a.png?base  |
| end    | end      |            | 图片放着最后面               | a.png?end   |
| line   | line     |            | 图片独占一行，在close模式下  | a.png?line  |
说明：表格中，[g]标志表示为组范围内定义，一组只需定义定一个出现的图片。[h]标
志说明，只有在水平布局[horizontal]下才有效，[v]表示只在垂直布局[vertical]有
效。其他都是针对单个图片设置的

==== 图片分组规则 ====

默认情况下，所有的图片分在同一个组，合成一张图片，需要额外分组，则在相应背景图图
片加上一个`id=\d`的参数，`\d`表示数字，从1开始计数，默认的sprite图片，id等于0，
不需要写

==== url参数的位置 ====

url参数中，在[g]下的参数，默认情况下，是读取页面第一次出现相应图片的时候。比如

{{{css
.main-left .fenlei h2 {
  background: url(../img/fenlei.png?id=1&way=h) repeat-y 0 0;
  width: 180px;
  height: 180px;
}
.main-right .tese h2 {
  background: url(../img/tese.png?id=1) no-repeat 0 10px;
  width: 480px;
}
  }}}
  
以上css规则中，*必须*把参数`way=h`写在第一个选择器的背景图中，不能写在第二个图片
上面，这一点规则非常重要。

==== 背景图片定位规则 ====

背景图的位置信息，经过3个步骤的判断计算来确定的：

- 首先是从background-position中获取到top，和left的位置，position 如果没有写top，
  left，默认都是0。top和left定义不明确，比如使用相对位置可能导致图片位置不对。
  position识别以下属性`left, 0, 100%, 50%, right, top, bottom,\dpx` \d表示数字。

- 第二步，根据图片本身的宽高，加上top和left的偏移，获得当前图片应该占有的空间

- 第三步，修正图片的大小，图片所占有的空间，应该等于背景图所在的盒子的大小，图片
  大小的修正，分两种方式，第一，使用手动设置`b=xx||r=xx`，标明底部或右边需要的空
  间。第二种，根据当前图片所在css规则的`height, width, line-height`来设置，比如
  上面一个例子中，有个css规则`width: 180px; height: 180px;`，可以确定背景图高宽。
  如果这两种方式都没有设置，在right和bottom默认给10像素间距。

前面两步确定了三个方向的位置，最后一步确定最后一个方向的间距。因为拼图是垂直或水
平方式，有一个方向是无需控制的。在垂直布局下，第三步只确定底部空间高度，水平布局
，第三步确定右边间距。

==== 背景图repeat ====

repeat不能同时和定位使用，也就是，有repeat，必须是position:0 0，这样的形式。重复
的单位是重复图片的倍数，如果图片很大，可能大致图片重复以后高度宽度多出不少。默认
情况下，不写repeat属性，在css解释用，是表示图片重复，不过在大多数情况下，不写
repeat 是因为开发者懒得写，同时背景图大小和所在的div大小一致，repeat和no-repeat
意义一样，所以，joycss默认解释repeat为no-repeat，如果有 repeat的图片，将无法拼图
，如果是repeat-x 或者repeat-y的方式，请不用省略。

==== sprite图片合并规则 ====

sprite图片名是文件名加上spriteId加上-sprite组成的，比如文件a.css，拼图后生成的
图片地址是`a-sprite.png, a1-sprite.png`。spriteId构成是和文件名同名，如果一个css
中有多个sprite图片，那么第二个开始加上数字，数字从1开始计数。

=== 依赖 ===

需要nodejs和php cli支持，php需要有gd库支持。

=== 项目中使用到的其他开源代码 ===

非常感谢Alexander Kaupp提供的php版本
[[http://www.tanila.de/smartsprite/index.php|smartsprite]], 如果没有这个拼图过程
的api，joycss还是在摸索如何拼图中，smartsprite提供了很好的拼图功能
，`src/graph/smartsprite.php`中，把smartsprite的拼图功能独立出来，通过
`src/graph/tpl.json`这样的json文件作为数据源，php版的smartsprite完成图片处理过程
， node执行css分析过程。

此外,`lib/PropertyValuePart.js`使用了
[[https://github.com/nzakas/parser-lib|nzakas/parser-lib]] 中的
`src/css/PropertyValuePart.js`，一个很好的css value读取代码。紧凑拼图使用了，
[[https://github.com/jakesgordon/bin-packing|jakesgordon/bin-packing]]的算法，
代码位置`lib/packer.js`。
